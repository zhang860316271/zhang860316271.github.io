<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九梦</title>
  <icon>https://www.gravatar.com/avatar/e04bb745ddb4503076f6b8f540d5c60a</icon>
  <subtitle>生活明朗 万物可爱</subtitle>
  <link href="https://gitee.com/zhangjiale20/zhangjiale/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/zhangjiale20/zhangjiale/"/>
  <updated>2023-10-30T02:26:37.174Z</updated>
  <id>https://gitee.com/zhangjiale20/zhangjiale/</id>
  
  <author>
    <name>张佳乐</name>
    <email>anzhiy-c@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次性弄清前端上线和生产环境地址</title>
    <link href="https://gitee.com/zhangjiale20/zhangjiale/posts/undefined.html"/>
    <id>https://gitee.com/zhangjiale20/zhangjiale/posts/undefined.html</id>
    <published>2023-10-30T02:13:28.000Z</published>
    <updated>2023-10-30T02:26:37.174Z</updated>
    
    <content type="html"><![CDATA[<p>1.前端项目打包后,我打包过的静态资源是如何访问后段服务的?<br>2.访问后段服务的时候难道不存在跨域的问题吗?如何解决的?<br>3.假如我想最近简单修改部署后的目录该如何做?</p><hr><p>💡Tips:不知道小伙伴在前端开发的时候有没有这样的困惑</p><p>前端项目打包后，我打包过的静态资源是如何访问后端服务的？<br>访问后端服务的时候难道不存在跨域的问题吗？如何解决的？<br>假如我想自己简单修改下部署后的目录该如何去做？</p><p>🥲其实不仅仅是你会有这样的疑惑，包括我在内刚接触前端的时候，由于没有后端的开发经验也会被这些问题所困扰，但是今天我们将一次性弄清楚这个问题，让我们前端的知识体系由点成线，由线成面~</p><h1 id="一-明确问题"><a href="#一-明确问题" class="headerlink" title="一.明确问题"></a>一.明确问题</h1><p>我们知道，我们平时在开发的时候一般都是使用proxy进行代理的，它的原理是：浏览器会先去访问本地的node服务器，然后node服务器再去代理到你要访问的后端api接口，但是我们可能平时没有node服务器的概念，因为node服务器在webpack中，我们一般是通过下面这种方式来设置</p><p>但是我们的项目上线后这种方式就不能用了，（因为Node是我们本地开发的环境，并没有办法在线上使用。）其实，我们一般会通过后端的Nginx代理来解决跨域的问题，但是你知道前端的生产地址配置是什么吗？如何通过Nginx访问后端接口呢？是直接配置的类似于<a href="http://www.xxxx.com/api/aaa%E8%BF%99%E6%A0%B7%E7%9A%84%E8%B7%AF%E5%BE%84%E5%91%A2%EF%BC%9F%E8%BF%98%E6%98%AF%E7%9B%B4%E6%8E%A5%E6%98%AF%E4%B8%80%E4%B8%AA%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/prod%EF%BC%9F%E8%A6%81%E6%83%B3%E6%90%9E%E6%B8%85%E6%A5%9A%E8%BF%99%E4%BA%9B%EF%BC%8C%E9%A6%96%E5%85%88%E5%B0%B1%E8%A6%81%E4%BA%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFNginx%E3%80%82">http://www.xxxx.com/api/aaa这样的路径呢？还是直接是一个相对路径/prod？要想搞清楚这些，首先就要了解什么是Nginx。</a></p><h1 id="二-什么是Nginx"><a href="#二-什么是Nginx" class="headerlink" title="二.什么是Nginx"></a>二.什么是Nginx</h1><p>🐻是一个开源的高性能、轻量级的Web服务器和反向代理服务器，它具有事件驱动，异步非阻塞的架构，被广泛应用于构建高性能的网站，应用程序和服务。<br>🤡在平时开发中我们经常听到正向代理和反向代理这两个名词，那么什么是反向代理，什么是正向代理哪？</p><p>反向代理：服务器的IP是被屏蔽的，也就是说客户端不知道服务器真实的地址是哪个，客户端访问的地址或者域名是访问的Nginx服务器的地址。</p><p>正向代理：和反向代理刚好相反，这个时候服务器不知道真正的客户端是哪个，也就是相当于直接访问服务器的是nginx代理服务器。</p><h1 id="三-前端使用Nginx解决跨域"><a href="#三-前端使用Nginx解决跨域" class="headerlink" title="三.前端使用Nginx解决跨域"></a>三.前端使用Nginx解决跨域</h1><p>🤗什么是跨域，跨域是指在浏览器的环境下，当一个网页的JavaScript代码通过Ajax Websocket或其他技术发送HTTP请求的目标资源位于不同的域名，端口或者协议下，就会发生跨域。<br>🐻Nginx如何解决跨域，因为服务器和服务器之间互相请求不发生跨域，所以解决跨域的方法之一就是使用这种方案</p><p>浏览器或者客户端发送请求：http:<a href="http://www.xxx.com:80Nginx服务器对80端口进行监听，Nginx服务器将请求转发到后端真实的服务器地址，这样就实现了代理。">www.xxx.com:80Nginx服务器对80端口进行监听，Nginx服务器将请求转发到后端真实的服务器地址，这样就实现了代理。</a></p><p>Nginx基本配置项解析</p><p>js复制代码server {<br>  listen 80;<br>  server_name yourdomain.com;</p><p>  location &#x2F; {     &#x2F;&#x2F; 无论访问所有路径都返回前端静态资源dist内容<br>    root &#x2F;path&#x2F;to&#x2F;your&#x2F;frontend;<br>    index index.html;<br>    try_files $uri $uri&#x2F; &#x2F;index.html;<br>  }</p><p>  location &#x2F;api&#x2F; {<br>    proxy_pass <a href="http://backend-server-address/api/">http://backend-server-address/api/</a>; &#x2F;&#x2F; 真实后端api地址<br>    proxy_set_header Host $host;<br>    proxy_set_header X-Real-IP $remote_addr;<br>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>  }<br>}</p><p>当在前端代码中使用相对路径&#x2F;api&#x2F;users发起请求时候Nginx会将这个请求转发到真实的后端地址，不过你发现了没很多前端项目种生产环境地址都仅仅是一个&#x2F;api类似这样的相对路径，很少直接是一个绝对路径。<br>当你请求 yourdomain.com 时，Nginx 会将前端静态资源返回给前端。前端代码中使用的相对路径 &#x2F;api会基于当前域名 yourdomain.com构建完整的请求 URL。因此，前端代码请求后端地址的完整 URL 将是 yourdomain.com&#x2F;api&#x2F;xxx，其中 &#x2F;xxx表示具体的后端接口路径。<br>Nginx 的反向代理配置中的 location &#x2F;api&#x2F; 指令将匹配以 &#x2F;api&#x2F; 开头的请求，并将这些请求代理到后端服务器上。因此，当前端代码发起相对路径请求 &#x2F;api&#x2F;xxx 时，Nginx 会将请求转发到 yourdomain.com&#x2F;api&#x2F;xxx，实现与后端接口的通信。<br>总结来说，前端代码中的相对路径 &#x2F;api会根据当前域名构建完整的请求 URL，而 Nginx 的反向代理配置将这些请求转发到后端服务器上的相应路径。这样，前端代码就能够与后端接口进行通信。</p><h1 id="四-前端生产环境配置"><a href="#四-前端生产环境配置" class="headerlink" title="四.前端生产环境配置"></a>四.前端生产环境配置</h1><p>🥲既然Nginx如何代理的，以及前端打包的路径一般是什么样的我们知道了，那么我们就来唠唠作为一个前端小白该如何快速的完整的构建一个基础项目吧，其实如果基础开发的话，我们往往会使用脚手架，就以Vue开发的话，我们可以使用vuecli来快速构建项目，其实构建完之后你就可以直接npm run build打出的包就可以部署在后端服务器的，这个打出的包的根路径是默认的&#x2F;，通过上面的Nginx的知识我们应该不难理解。<br>🤡如果我们要自己想去修改一个路径哪？我们可以在vue.config.js中进行配置，配置如下<br>js复制代码module.exports &#x3D; {<br>  publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘production’ ? ‘&#x2F;prod’ : ‘&#x2F;‘<br>};</p><p>👹这样打出的包的静态资源的路径就是下边这样的</p><p>🥰如果是直接使用的默认的打包路径就是如下这种</p><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h1><p>🤡最后总结一下，前端上线打包完就是一个静态文件，是一个相对路径，后端会通过Nginx来监听这个资源的请求，当匹配到&#x2F;就返回静态资源，当匹配到某个&#x2F;prod就将请求反向代理到后端真实服务器的地址，前端打包的是一个相对路径，Nginx会在前面拼上去具体的域名或者ip，这样就打通了线上前端访问的基本内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.前端项目打包后,我打包过的静态资源是如何访问后段服务的?&lt;br&gt;2.访问后段服务的时候难道不存在跨域的问题吗?如何解决的?&lt;br&gt;3.假如我想最近简单修改部署后的目录该如何做?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;💡Tips:不知道小伙伴在前端开发的时候有没有这样的困惑&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>张佳乐第一篇笔记</title>
    <link href="https://gitee.com/zhangjiale20/zhangjiale/posts/31ea.html"/>
    <id>https://gitee.com/zhangjiale20/zhangjiale/posts/31ea.html</id>
    <published>2023-10-25T03:06:16.000Z</published>
    <updated>2023-10-30T02:13:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>博客诞生记.</p><hr><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>博客时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-10-25 18:50</p></div></div><div class='timeline-item-content'><p>博客上线成功!</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-10-24 18:20</p></div></div><div class='timeline-item-content'><!-- timeline 2023-10-25 9:50 --><p>页面开始服务器部署</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-10-24 18:20</p></div></div><div class='timeline-item-content'><p>博客页面开始搭建</p></div></div></div><h1 id="在线图片"><a href="#在线图片" class="headerlink" title="在线图片"></a>在线图片</h1><p><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客诞生记.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;时间轴&quot;&gt;&lt;a href=&quot;#时间轴&quot; class=&quot;headerlink&quot; title=&quot;时间轴&quot;&gt;&lt;/a&gt;时间轴&lt;/h1&gt;&lt;div class=&quot;timeline undefined&quot;&gt;&lt;div class=&#39;timeli</summary>
      
    
    
    
    
  </entry>
  
</feed>
